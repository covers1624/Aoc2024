plugins {
    id 'java'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
}

group = 'net.covers1624'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.logging.log4j:log4j-core:3.0.0-beta2'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:3.0.0-beta2'

    implementation 'net.covers1624:Quack:0.4.10.111'
    implementation 'com.google.guava:guava:33.3.1-jre'

    implementation 'org.apache.commons:commons-text:1.12.0'
    implementation 'org.apache.commons:commons-lang3:3.17.0'
    implementation 'it.unimi.dsi:fastutil:8.5.15'

    implementation 'org.openjdk.jmh:jmh-core:1.37'
    annotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.37'

    testImplementation platform('org.junit:junit-bom:5.11.3')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

compileJava {
    options.compilerArgs += ['--add-modules', 'jdk.incubator.vector']
}

def allJmh = []
for (final def fName in file('src/main/java/net/covers1624/aoc2024').list()) {
    def f = fName.replace('.java', '')
    if (f == 'Day') continue

    allJmh << tasks.register('jmh_' + f, JavaExec) {
        classpath = sourceSets.main.runtimeClasspath + sourceSets.main.output
        javaLauncher = javaToolchains.launcherFor {
            languageVersion = java.toolchain.languageVersion
        }

        jvmArgs = [
                '--add-modules',
                'jdk.incubator.vector',
//                '-XX:+UnlockDiagnosticVMOptions',
//                "-XX:CompileCommand=PrintAssembly,*${f}.*",
//                '-XX:+PrintOptoAssembly',
//                '-XX:PrintAssemblyOptions=intel'
        ]

        mainClass = 'org.openjdk.jmh.Main'
        args '-rff', file("src/main/resources/${f.toLowerCase()}/results.txt")
        args '-rf', 'text'
        args "net.covers1624.aoc2024.${f}.*"
    }
}

tasks.register('jmhAll') {
    dependsOn allJmh
}
